






library(maptools)
library(osmar)
url <- "http://osmar.r-forge.r-project.org/"
file <- "http://download.geofabrik.de/north-america/us-latest.osm.pbf"
download.file(sprintf("%s%s", url, file), file)
unzip("gzip -d muenchen.osm.gz") # gzip is linux only, on windows I unzipped this manually with 7zip!

src <- osmsource_osmosis(file = "muenchen.osm")
muc_bbox <- center_bbox(11.575278, 48.137222, 3000, 3000)
muc <- get_osm(muc_bbox, src)
muc
summary(muc)

building_ids <- find(muc, way(tags(k == "addr:street")))
building_ids <- find_down(muc, way(building_ids))
hw <- subset(muc, ids = building_ids)

plot(muc)
plot_ways(hw, add = TRUE, col = "green")

# convert to spatial object (SpatialLinesDataFrame)
# and save to whatever format you like..
hw_line <- as_sp(hw, "lines")

library(data.table)
dt <- fread("curl http://download.geofabrik.de/north-america/us/texas-latest-free.shp.zip | tar -xf- --to-stdout *texas-latest-free-shp.zip")








###### Voronoi tesselation

"Thiessen polygon maps, which are also called Voronoi diagrams, are used to define and to delineate proximal regions around individual data points by using polygonal boundaries."\[Source\]\['https://www.sciencedirect.com/topics/earth-and-planetary-sciences/voronoi-diagram#:\~:text=Thiessen%20polygon%20maps%2C%20which%20are,points%20by%20using%20polygonal%20boundaries.'\]

```{r}
#st_no_overlap <- function(polygons) {

 # centroids <- st_centroid(polygons)

  # Voronoi tesselation
  #voronoi <-
   # centroids %>%
    #st_geometry() %>%
    #st_union() %>%
    #st_voronoi() %>%
    #st_collection_extract() %>% 
    #st_overlaps(st_set_precision(st_no_overlap(st_sf(geometry = areas_bordering_buffer))))

  # Put them back in their original order
  #voronoi <- voronoi[unlist(st_intersects(centroids, voronoi))]

  # Keep the attributes
  #result <- centroids

  # Intersect voronoi zones with polygons
  #st_geometry(result) <-
   # mapply(function(x, y) st_intersection(x, y),
    #       st_geometry(polygons),
     #      voronoi,
      #     SIMPLIFY = FALSE) %>%
  #  st_sf(crs = st_crs(polygons, 4326))

  #result
#}


# applying this function, could not properly triangulate 
#areas_bordering_buffer_2 <- st_no_overlap(areas_bordering_buffer$geometry)
```















want:

a scalable map of USA w/ state boundaries

the name of the plants as points

adjustable buffer zones (donuts) around the plants

ability to randomly select addresses within the buffer

filter for specific groups of interest
## Initial Visualization of the Data

#### Regions of Interest

[Region Codes](https://ncsesdata.nsf.gov/docs/location.html) reveals the various regions throughout the US that are identifiable using codes between 1:10. US Territories are categorized under the Pacific Region Code, 9. Other states like CA, OR, HA, AK, and WA are also in the Pacific Region.

```{r}
unique(ejscreen$REGION)
```

#### Identifying the State Names for US Territories

To properly filter out these unwanted observations, it's best to identify the exact names of the unwanted regions. We can do this using the `unique` function on the state_name column.

```{r}
print(unique(ejscreen$STATE_NAME))
```

#### Removing Regions Outside of Interest

**not subsetting properly, maybe use** `subset()`

```{r}
nonmapping_territories <- c('Puerto Rico', 'Guam', 'Virgin Islands', 'Northern Mariana IS', 'American Samoa')

us_basemap_data <- ejscreen %>% 
  filter(STATE_NAME != nonmapping_territories) %>% 
  filter(REGION != 10) %>% 
  group_by(STATE_NAME)
```

#### Next Idea: Create a Mask using US Country Coordinates

[Geojson Coordinate Mapper for Masks](http://geojson.io/#map=2.59/42.2/-96.48)

The regions of interest within of the United States are contained within the following coordinates:

**( A helpful shortcut to fix indentation is highlighting any script and using ctrl+i )**

-   `(-127.53756028744647, 48.89026620120862),`

-   `(-127.53756028744647, 24.9290443910311),`

-   `(-66.66926544935788, 24.9290443910311),`

-   `(-127.53756028744647, 48.89026620120862)`

These coordinates were then turned into a polygon using `st_polygon` and further converted into a simple feature collection (sfc) using `st_sfc()`. The CRS of this sfc was then converted to match the map to perform the crop.

The coordinates were selected using [geojson.io](geojson%20by%20Mapbox).

Our approach to mapping the entire region of interest, we will make polygons to represent Alaska, Hawaii, and mainland United States and combine them together to make a mask. This mask will then be used to crop the EJSCREEN data, optimizing it for mapping the regions containing information on public opinions and wind power infrastructure.

#### Creating Polygons for Regions of Interest (roi)

```{r}
# creating polygons that represent our regions of interest (roi)

mainland_states <- st_polygon(                            # creates a polygon with sf sticky geometries
  list(                                                   # stores the values as a list
    rbind(                                                # binds the following coordinates into a list
      c(-127.53756028744647,                              # coordinates of the polygon roi
        48.89026620120862),
      c(-127.53756028744647,
        24.9290443910311),
      c(-66.66926544935788,
        24.9290443910311),
      c(-66.66926544935788,
        48.89026620120862),
      c(-127.53756028744647,
        48.89026620120862)
    )
  )
) %>% 
  st_sfc(mainland_states) %>%                             # creates a special feature collection 
  st_set_crs(4326) %>%                                    # assigns a CRS that matches our data sets
  st_make_valid()                                         # corrects and invalid geometries 

alaska <- st_polygon(
  list(
    rbind(
      c(-140.2228758707459,
        51.668928934953044),
      c(-140.2228758707459,
        71.43126120088658),
      c(-195.54541333159068,
        71.43126120088658),
      c( -195.54541333159068,
         51.668928934953044),
      c(-140.2228758707459,
        51.668928934953044)
    )
  )
) %>% 
  st_sfc(alaska) %>%                           
  st_set_crs(4326) %>%                                    
  st_make_valid()

hawaii <- st_polygon(
  list(
    rbind(
      c( -154.04703346642728,
         18.040468043330847),
      c(-154.04703346642728,
        22.729375583644853),
      c( -160.94922236072725,
         22.729375583644853),
      c(-160.94922236072725,
        18.040468043330847),
      c(-154.04703346642728,
        18.040468043330847)
    )
  )
) %>% 
  st_sfc(hawaii) %>%                        
  st_set_crs(4326) %>%                                    
  st_make_valid()
```

#### Making a Multipolygon

```{r}
states_polygon <- st_multipolygon(list(mainland_states, alaska, hawaii))
```

*Preliminary Plot of Cropped EJScreen*

```{r}
ggplot() +
  geom_sf(data = ejscreen_cropped) +
  geom_sf(data = wind_sf) +
  theme_bw()
```

**improperly subset, so unable to map**

```{r}
tmap_mode('view')

tm_shape(us_basemap_data) +
  tm_shape(wind_sf) 

```

```{r}
ggplot() +
  geom_sf(data = us_basemap_data) +
  geom_sf(data = wind_sf) +
  theme_bw() +
  labs(title = "US Wind Infrastructure Plants") 
 # annotation_scale(plot_unit = "km") + # add scale bar
  #annotation_north_arrow( # add north arrorw
   # location = "tr",
    #pad_x = unit(0.2, "in"),
    #pad_y = unit(0.2, "in"),
    #style = ggspatial::north_arrow_nautical( # customize north arrow
     # fill = c("grey40", "white"),
    #  line_col = "grey20"
    #)
#  )

```

## Subsetting Wind Plant Locations in US

\*\* double check written description here \*\*

The code below selects only coordinates that intersect with the wind data and us mapping information

```{r}
# wind_sf <- wind_sf[us_basemap_data,]       # creates a combined subset of the                                                   wind data and the us}
```

```{r}
tmap_mode('view')

tm_shape(sweetwater) +
  tm_shape(roscoe_wind_farm_buffer) +
  tm_symbols('plant_name')
```


```{r include=TRUE}
tm_shape(wind_data_buffer) +
  tm_polygons()
```

```{r}

```






```{r}
# This is likely not going to be used bc it's so length and not good for a demo
# Defining the largest region of interest (roi) with a more detailed polygon
most_states <- st_polygon(
  list(
    rbind(
      c(-124.7683239292993,
        48.51879901093241),
      c(-125.31102993108271,
        48.422999504412644),
      c(-126.47292011604173,
        35.670110760169976),
      c(-117.17950403491858,
        32.48517689935446),
      c( -115.53235430721071,
         32.67176036148632),
      c(-114.80351108555175,
        32.543893442329704),
      c(-111.03863703045016,
        31.299879430746003),
      c(-108.24124312438894,
        31.35270842722285),
      c( -108.22527267332418,
         31.753082999387686),
      c( -106.47021101877843,
         31.803093694842985),
      c(-105.77764731615792,
        31.06365529027424),
      c(-104.94420550251147,
        30.720576390577847),
      c(-104.73300064673649,
        29.71495549571327),
      c(-103.22111700418844,
        28.959676991462885),
      c(-102.7181032302978,
        29.693265854367468),
      c(-101.39017605294492,
        29.768327008419035),
      c( -100.47491301946704,
         28.580890216987072),
      c( -99.71713067291145,
         27.670751271998114),
      c( -99.07608241955239,
         26.409495941894292),
      c( -97.3953304614522,
         25.8463767407942),
      c(-95.69347894303347,
        27.235583104060268),
      c(-87.81838772468433,
        28.158178689904858),
      c(-81.02102959651472,
        24.541726852971678),
      c(-77.14837007712036,
        25.60290744859131),
      c( -69.56331678374016,
         41.66487542387276),
      c(-70.58586686824586,
        42.662079597953095),
      c( -70.73843480993642,
         43.050803948576515),
      c(-67.63826560349408,
        44.45909085903372),
      c(-70.22677492504421,
        43.63525346854257),
      c( -66.95484440009233,
         44.762494010918374),
      c(-67.40680703701824,
        45.57061805095702),
      c( -67.78627772453453,
         45.716891588713395),
      c( -69.02279501251655,
         47.293032987364256),
      c(  -70.25689681218171,
          46.38245407258333),
      c(-71.48604531686188,
        45.016966299165375),
      c( -74.89279164691709,
         45.00582606426829),
      c(-76.66266140486007,
        43.58855917414749),
      c(-79.20206922054933,
        43.44347344018695),
      c(-78.84994043845106,
        42.821086429277756),
      c( -80.8594249881831,
         42.384459228861374),
      c( -82.90691771167019,
         41.812565472754926),
      c( -84.23820665976814,
         46.543653836738),
      c( -88.37483717010814,
         48.292556337127024),
      c(-93.14033719636517,
        48.66937564952303),
      c(  -94.81235312694693,
          49.30920113498797),
      c( -95.21209449882286,
         49.0416181757262),
      c(-122.80604399519439,
        49.04774356528915),
      c( -123.65571291797716,
         48.22470947216311),
      c(-124.7683239292993,
        48.51879901093241)
    )
  )
)
```


*Preliminary Plot of Wind Data*

```{r}
ggplot() +
  geom_sf(data = wind_sf) 
```

First attempt is not the best method because it does not include the states & their borders

```{r}
#us <- world %>%                              # calls sf dataset
 # filter(name_long == "United States") %>%   # filters for states in the US
  #st_transform(us, crs = "EPSG:4326")        # converts the CRS to match wind_sf

#us_map <- ggplot(us) +
 # geom_sf(color = 'black')

#us_map
```

*Second attempt is missing Alaska and Hawaii but has borders*

```{r}
#usa <- st_as_sf(maps::map('state', fill = TRUE, plot = FALSE))

#ggplot(usa) +
 # geom_sf(color = 'black',
  #        fill = 'white',
   #       size = 0.125) +
  #coord_sf(crs = st_crs(4326))
```

*Third Attempt*

```{r}
#str(us_map())

#us_states_for_mapping <- us_map(
 # regions = "states")

#ggplot(us_states_for_mapping) +
 # geom_sf(color = "black")
```

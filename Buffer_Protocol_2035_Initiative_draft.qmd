---
title: "Buffer_Protocol_Rough_Draft"
author: "Sofia Ingersoll"
format: html
editor: visual
---

*Rough Draft pls no judging yet*

# Protocol for Creating Buffer Zones & Selecting Random Addresses in Buffer Regions

The following code describes a step-by-step process for creating a map containing buffer zones around points of interest. In this documentation, the data utilized is the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0), this data is associated with the "Replication Data for: Prevalence and predictors of wind energy opposition in North America",Â <https://doi.org/10.7910/DVN/LE2V0R>, Harvard Dataverse, V1, 2023. The collaborators on that project include: Stokes, Leah; Franzblau, Emma; Lovering, Jessica R.; Miljanich, Chris.

\~ include more about what the data is about and the outcomes of making visualization \~

Analysis of these areas will provide insight into local resistance and spatially distorted signalling in relation to wind power infrastructure and climate policy.

### Loading Libraries

The following libraries were selected based on their functionality and ability to optimize our data for mapping.

```{r, message = FALSE}
# Loading Libraries
library(tidyverse)      
library(sf)               
library(raster)
library(tmap)
library(terra)
library(stars)
library(smoothr)         
library(maptiles)
library(devtools)
library(ggspatial)
library(sp)
```

### Read in the Data

To simplify the following step, it is important to organize your folders in a way that makes sense for your workflow. In many cases, the data sets we work with are typically too large to be uploaded to GitHub. As a result, a common practice is storing your data in a folder, directly outside of your repository in a folder labeled "data".

The code chunk below for `read.csv` demonstrates how to exit your current location using `..` and enter the desired folder location using `/`. It is important that your file path does not contain any spaces and is directly reflective of the file path for the data you wish to read in.

#### U.S. Wind Data

```{r}
# reading in & storing data
wind_data <- read.csv("../data/wind_data/wind_data_usa.csv")  
```

##### Confirm the Data Loaded Properly

Using gg`plot()`, we can see that the geometries stored by this data set correlate to the locations of wind infrastructure plants throughout the United States. In order to visualize these locations with respect to state and county jurisdictions, we'll need to utilize another data set to create a base layer for our map. Here, we'll use the `ggspatial` function `annotation_map_tile`.

```{r}
head(wind_data)                  # displays the first 6 rows of the data
                                 # along with all of the columns 
```

### **Converting lat/long into Raster Data (i.e. sticky geometries)**

Below we will use the package `sf` to convert the lat/long data into a raster geometry column. In this single line, we will also be assigning the CRS EPSG:4326 to the sf data frame. The CRS was selected because it provides a relatively proportionate display of the United States. We are open to suggestions regarding our CRS if a different project better fits our data.

```{r}
wind_sf <- wind_data %>%             # calls desired dataset
  st_as_sf(coords = c("longitude", "latitude"), crs = 3857) 
                                     # creates geometry column with desired crs 
```

#### Check-point

Let's stop and see if our outputs are what we expect.

Were the lat/long columns correctly converted into a geometry column? `setdiff()` is a way to quickly determine the differences between two data sets.

```{r}
setdiff(colnames(wind_data), colnames(wind_sf))
setdiff(colnames(wind_sf), colnames(wind_data))
```

If we plot our sf object, is it what we expect?

```{r}
# First visual of the U.S. wind data provided by the geometry points
wind_plants <- ggplot(wind_sf) +
  annotation_map_tile(type = "osm") +
  geom_sf(col = 'darkgreen',
          alpha = 0.5,
          size = 3) 

wind_plants
```

### AOI Data

#### Sweetwater, TX

```{r include=TRUE, eval=FALSE, warning=FALSE, error=FALSE}
tx <- st_read("../data/wind_data/tl_2023_48_tabblock20/tl_2023_48_tabblock20.shp",
                      quiet = TRUE)

# reads in raster data using the sf package st_read function
# the quiet T/F input refers to information output after importing data

st_transform(tx, "EPSG:3857")

plot(tx$geometry)
```

## Wrangling & Subsetting

```{r}
# bounding box of sweetwater tx, created using GeoJSON
bbox = st_polygon(
  list(
    rbind(
      c(-100.51538367204945,
        32.540732126848056),
      c(-100.51538367204945,
        32.39715128820876),
      c(-100.26428210215887,
        32.39715128820876),
      c(-100.26428210215887,
        32.540732126848056),
      c(-100.51538367204945,
        32.540732126848056)
    )
  )
)
# making bounding box an sf object for cropping later
bbox <- bbox %>% 
  st_sf() %>% 
  st_set_crs(3857) %>% 
  st_make_valid() 
```

#### **Confirm Characteristics Match**

##### CRS? Extent?

Coordinate Reference Systems, CRS, are required in order for the data to be projected onto a map.

We need to convert the coordinate formats because the two do not currently match and it's making the plot look weird. To do this, we'll use the `sp` package to make them both decimal degrees.

```{r}
roscoe_wind_farm <- st_transform(roscoe_wind_farm, CRS=CRS("+init=epsg:3857"))

sphere.geoxyz
```

```{r}
extent(sweetwater) == extent(roscoe_wind_farm)

extent(sweetwater)

extent(roscoe_wind_farm)
```

```{r}
# Crop the tx shapefile to only sweetwater bbox bounds. Some crs wrangling & checking needed before we can crop & plot.
st_crs(tx) == st_crs(bbox)

sweetwater <- st_crop(tx, bbox) %>% 
  st_sf() %>% 
  st_transform(3857) %>% 
  st_make_valid()


ggplot(sweetwater) +
  geom_sf(aes(size = HOUSING20), color = 'blue')

```

```{r}
roscoe_wind_farm <- wind_sf %>% 
  filter(plant_name %in% "roscoe wind farm llc") %>% 
  st_sf() %>% 
  st_transform(3857) %>% 
  st_make_valid()

# visualize roscoe wind farm llc in sweetwater, tx 
ggplot(roscoe_wind_farm) +
  annotation_map_tile(type = "osm") +
  geom_sf(col = 'darkgreen',
          alpha = 0.5,
          size = 3) 
```

want:

-   a map of Sweetwater, TX

-   the name of roscoe wind farm llc wind plant as a point with a 3km buffer donut around it

-   ability to randomly select addresses within the buffer

-   bonus: filter for specific groups of interest

```{r}
ggplot() +
  geom_sf(data = sweetwater$geometry) +
  geom_sf(data = roscoe_wind_farm$geometry)
```

## Buffers

Buffers create polygons representing a set distance from a feature.

The buffer zone dimensions were selected to correlate with the research presented in "Replication Data for: Prevalence and predictors of wind energy opposition in North America".

**Below is psuedocode for now until the cleaning is configured right**

```{r}
roscoe_wind_farm_buffer <- st_buffer(roscoe_wind_farm, dist = 3000)
```

------------------------------------------------------------------------

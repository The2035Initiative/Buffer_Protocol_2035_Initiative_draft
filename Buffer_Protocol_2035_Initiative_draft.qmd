---
title: "Buffer_Protocol_Rough_Draft"
author: "Sofia Ingersoll"
format: html
editor: visual
---

*Rough Draft pls no judging yet*

# Protocol for Creating Buffer Zones & Selecting Random Addresses in Buffer Regions

### Loading Libraries

The following libraries were selected based on their functionality and ability to optimize our data for mapping.

```{r, message = FALSE}
# Loading Libraries
library(tidyverse)      
library(sf)               
library(raster)
library(tmap)
library(terra)
library(stars)
library(smoothr)         
library(maptiles)
library(devtools)
library(ggspatial)
library(sp)
library(RColorBrewer)
library(plotly)
```

## Main Function

The function allow includes the standard operating procedure for identifying `surveying_points` in regions of interest

```{r}

```

## Step-by-Step Walk Through of the Function

The following code describes a step-by-step process for identifying `surveying_points`protocol. Together, we will be creating a map containing buffer zones around points of interest. In this example documentation, the data utilized was the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0), this data is associated with the "Replication Data for: Prevalence and predictors of wind energy opposition in North America", <https://doi.org/10.7910/DVN/LE2V0R>, Harvard Dataverse, V1, 2023. The collaborators on that project include: Stokes, Leah; Franzblau, Emma; Lovering, Jessica R.; Miljanich, Chris. Analysis of these areas will provide insight into local resistance and spatially distorted signalling in relation to wind power infrastructure and climate policy.

### Read in the Data

To simplify the following step, it is important to organize your folders in a way that makes sense for your workflow. In many cases, the data sets we work with are typically too large to be uploaded to GitHub. As a result, a common practice is storing your data in a folder, directly outside of your repository in a folder labeled "data".

The code chunk below for `read.csv` demonstrates how to exit your current location using `..` and enter the desired folder location using `/`. It is important that your file path does not contain any spaces and is directly reflective of the file path for the data you wish to read in.

#### U.S. Wind Data

```{r}
# reading in & storing data
wind_data <- read.csv("../data/wind_data/wind_data_usa.csv")  
```

##### Confirm the Data Loaded Properly

Using gg`plot()`, we can see that the geometries stored by this data set correlate to the locations of wind infrastructure plants throughout the United States. In order to visualize these locations with respect to state and county jurisdictions, we'll need to utilize another data set to create a base layer for our map. Here, we'll use the `ggspatial` function `annotation_map_tile`.

```{r}
head(wind_data)                  # displays the first 6 rows of the data
                                 # along with all of the columns 
```

### **Converting lat/long into Raster Data (i.e. sticky geometries)**

Below we will use the package `sf` to convert the lat/long data into a raster geometry column. In this single line, we will also be assigning the CRS EPSG:4326 to the sf data frame. The CRS was selected because it provides a relatively proportionate display of the United States. We are open to suggestions regarding our CRS if a different project better fits our data.

```{r}
wind_sf <- wind_data %>%             # calls desired dataset
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) 
                                     # creates geometry column with desired crs 
```

#### Check-point

Let's stop and see if our outputs are what we expect.

Were the lat/long columns correctly converted into a geometry column? `setdiff()` is a way to quickly determine the differences between two data sets.

```{r}
setdiff(colnames(wind_data), colnames(wind_sf))
setdiff(colnames(wind_sf), colnames(wind_data))
```

If we plot our sf object, is it what we expect?

```{r}
# First visual of the U.S. wind data provided by the geometry points
wind_plants <- ggplot(wind_sf) +
  annotation_map_tile(type = "osm") +
  geom_sf(col = 'darkgreen',
          alpha = 0.5,
          size = 3) 

wind_plants
```

## Selecting a Wind Farm

```{r}
# create a function to select a plant name
select_wind_farm <- function(plant_name) {
  wind_sf %>% 
  filter(plant_name %in% "roscoe wind farm llc") %>% 
  st_sf() %>% 
  st_transform(4326) %>% 
  st_make_valid()
}

# filter for the plant name observation roscoe wind farm llc
wind_farm <- select_wind_farm("roscoe wind farm llc")

# filter for the plant name observation roscoe wind farm llc
wind_farm <- wind_sf %>% 
  filter(plant_name %in% "roscoe wind farm llc") %>% 
  st_sf() %>% 
  st_transform(4326) %>% 
  st_make_valid()

# where is our wind farm located?
extent(wind_farm)
```

### Let's take at look at our wind farm of interest!

```{r}
# visualize roscoe wind farm llc in sweetwater, tx 
ggplot(wind_farm) +
  annotation_map_tile(type = "osm") +
  geom_sf(col = 'darkgreen',
          alpha = 0.5,
          size = 3) 
```

### AOI Data

Below, we will read in some data corresponding to the state of interest. In this example, we are loading in a shapefile for Texas.

#### Nolan County, TX

```{r include=TRUE, eval=FALSE, warning=FALSE, error=FALSE}
# read in data corresponding to the state of interest. In this example, we are loading in a shapefile for Texas.
state <- st_read("../data/wind_data/tl_2023_48_tabblock20/tl_2023_48_tabblock20.shp",
                      quiet = TRUE)

# reads in raster data using the sf package st_read function
# the quiet T/F input refers to information output after importing data

# Setting the CRS for our state shapefile
state <- st_transform(state, "EPSG:4326")
```

## Wrangling & Sub-setting

When crafting a bounding box, we need to remember our goal:

-   Geo-locate neighborhoods within a 3km radius of a power plant for surveying.

Note: for every 0.01 change in coordinate decimal degrees equates to 1.11 km in distance.

The extent of our wind plant of interest is roughly (100.67, 32.47). Therefore, we expect our buffer extent to be within ± 0.03 of the extent. To graph a wider perspective, we will make our bounding box 0.06 beyond the wind plant extent.

## Creating a Bounding Box for our Area of Interest (AOI)

I want to create a function that can automatically determine a bounding box region according to the extent of the wind farm.

```{r}
# bounding box of sweetwater tx, created using GeoJSON
bbox <- st_polygon(
  list(
    rbind(
      c(-100.83,
        32.53),
      c(-100.83,
        32.41),
      c(-100.51,
        32.41),
      c(-100.51,
        32.53),
      c(-100.83,
        32.53)
    )
  )
)

# making bounding box an sf object for cropping later
bbox <- bbox %>% 
  st_sfc() %>% 
  st_set_crs(4326) %>%  
  st_make_valid() 

# Crop the tx shapefile to only sweetwater bbox bounds. Some crs wrangling & checking needed before we can crop & plot.
st_crs(state) == st_crs(bbox)
```

#### Quick Visualization of bbox created for our aoi, overlayed with the wind farm's location.

Notes:
Improve background color, point style, size, and color, adjust graticules, include scalebar and compass.
```{r}
# Crop shapefile of tx to our bounding box extent
aoi <- st_crop(state, bbox) %>% 
  st_sf() %>% 
  st_transform(4326) %>% 
  st_make_valid()

# visualization of our wind farm overlayed ontop of our aoi.
ggplot() +
  geom_sf(data = aoi$geometry) +
  geom_sf(data = wind_farm$geometry, 
          color = "turquoise",
          size = 3)
```

## Buffers

Buffers create polygons representing a set distance from a feature.

The buffer zone dimensions were selected to correlate with the research presented in "Replication Data for: Prevalence and predictors of wind energy opposition in North America".

### Visualization of Geo-locations to Extract for Surveying

want:

-   a map of Nolan County, TX

-   the name of roscoe wind farm llc wind plant as a point with a 3km buffer donut around it

-   ability to randomly select addresses within the buffer

-   bonus: filter for specific groups of interest

Notes to improve map:

Better scalebar, compass, graticules - move outside of map. More informative binning that applies to the buffer region. (Is there a way to automate this process?) Move legend to the right. Include the name of the power plant. Include the block or tract ids for the regions within the buffer (maybe subset nolan_county from buffer object). Better colors. Add name of wind plant too.

```{r}
tm_shape(aoi) +
  tm_polygons('POP20',
              palette = 'Purples') +
tm_shape(wind_farm_buffer) +
  tm_polygons(alpha = 0.3) +
  tm_shape(wind_farm) +
  tm_bubbles(fill = 'tan',
          title = 'Roscoe Wind Farm LLC') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_graticules(alpha = 0.05) +
  tm_title('Buffer AOI Within 3 km of Roscoe Wind Farm LLC: Nolan County, TX')
  
  #tm_compass(type = 'rose',
   #          lw = 0,
    #         size = 2)
```

### Creating & Isolating a 3 km Buffer Region in our AOI

First, we will create a 3 km buffer around the wind farm.

Next, we will find the geo-points bordering and within our buffer aoi.

`st_intersection` combines the locations from the buffer and our aoi that intersect. This will combine all of the variables from both data sets.

`st_filter` applying `.predicate = st_within` filters the points in our aoi that fall within the wind_farm_buffer. The only information contained in this output are variables from the aoi data set.

```{r}
# create a 3 km buffer around the wind farm
wind_farm_buffer <- st_buffer(wind_farm, dist = 3000) 

# combine the locations from the buffer and our aoi that intersect. 
# for some reason, I haven't been able to get st_filter join = st_intersects to work, so we're using st_intersection for now
areas_bordering_buffer <- st_intersection(aoi, wind_farm_buffer)

# filter the points in our aoi that fall within the wind_farm_buffer. The only information contained in this output are variables from the aoi data set.
areas_within_buffer <- st_filter(aoi, wind_farm_buffer, .predicate = st_within)

# include the variables from wind_farm_buffer that correspond to the observations in areas_within_buffer
areas_within_buffer <-st_join(areas_within_buffer, wind_farm_buffer, st_intersects)
```

### Inspecting our Surveying AOI

We're going to retrieve the coordinates from the matrix containing the locations withiin the aoi buffer region. These are the most ideal locations for surveying.

The output will contain integer indicators that provide some insight into the kind of structure(s) are associated with each coordinate. More information can be found [here](https://r-spatial.github.io/sf/reference/st_coordinates.html) and [here](https://search.r-project.org/CRAN/refmans/sf/html/st_coordinates.html).

In this case, our outputs contain `L1` that has a single output of 1. This indicates these values are on the exterior ring of the buffer. When `L1` is greater than 1, then the associated coordinate is within the interior ring.

`L2` refers to the simple feature, for the polygon on multipolygon `L1` describes.

`L3` 

#### Creating a sf object containing the coordinates of surveying points within our AOI.

Firstly, we will retrieve the coordinates from the matrix containing the locations within and intersecting the aoi buffer region. Next, we will combine both regions of interest and saving the surveying points as an sf object with the CRS 4326. Finally, we will remove any replicated geometric points by grouping them together and confirm the number of unique observations is equal to the number of observations in our sf object.

```{r}
# Retrieve the coordinates from the matrix containing the locations within the aoi buffer region. 
surveying_points_within <- st_coordinates(areas_within_buffer) %>% 
  as.data.frame() %>% 
  print(ncol)

# Retrieve the coordinates from the matrix containing the locations bordering the aoi buffer region.
surveying_points_bordering <- st_coordinates(areas_bordering_buffer) %>% 
  as.data.frame() %>% 
  print(ncol)

# combining both regions of interest.
surveying_points <- full_join(surveying_points_within, surveying_points_bordering) 

# saving the surveying points as an sf object with the CRS 4326. 
surveying_points <- surveying_points %>% 
  st_as_sf(coords = c("X", "Y")) %>% 
  st_set_crs(4326)

# Remove any replicated geometric points by grouping them together.
surveying_points <- surveying_points %>% 
  group_by_all(sf_column_name = geometry) %>% 
  distinct()  

# confirm the number of unique observations is equal to the number of observations in our sf object.
nrow(unique(surveying_points)) == nrow(surveying_points)
```

### Geo-locating Neighborhoods to Survey Visualization

```{r}

```


want:

-   extract tract id / block id / addresses from buffer region

### Function to Automate our Process

want:

-   one function that contains all the necessary steps to configure the same outputs above, but for new wind power plants.

We would need a dataset for the entire country. At this point in time, we are limited to the state of Texas.

```{r}

```

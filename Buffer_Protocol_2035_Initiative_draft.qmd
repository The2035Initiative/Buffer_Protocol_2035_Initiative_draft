---
title: "Buffer_Protocol_Rough_Draft"
author: "Sofia Ingersoll"
format: html
editor: visual
---

*Rough Draft pls no judging yet*

# Protocol for Creating Buffer Zones & Selecting Random Addresses in Buffer Regions

### Loading Libraries

The following libraries were selected based on their functionality and ability to optimize our data for mapping.

```{r, message = FALSE}
#------Loading Libraries---------
library(tidyverse)      
library(sf)               
library(raster)
library(tmap)
library(terra)
library(stars)
library(smoothr)         
library(maptiles)
library(devtools)
library(ggspatial)
library(sp)
library(RColorBrewer)
library(plotly)
library(leaflet)
```

## Main Function

The function allow includes the standard operating procedure for identifying `surveying_points` in regions of interest

```{r}

```

## Step-by-Step Walk Through of the Function

The following code describes a step-by-step process for identifying `surveying_points`protocol. Together, we will be creating a map containing buffer zones around points of interest. In this example documentation, the data utilized was the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0), this data is associated with the "Replication Data for: Prevalence and predictors of wind energy opposition in North America",Â <https://doi.org/10.7910/DVN/LE2V0R>, Harvard Dataverse, V1, 2023. The collaborators on that project include: Stokes, Leah; Franzblau, Emma; Lovering, Jessica R.; Miljanich, Chris. Analysis of these areas will provide insight into local resistance and spatially distorted signalling in relation to wind power infrastructure and climate policy.

### Read in the Data

To simplify the following step, it is important to organize your folders in a way that makes sense for your workflow. In many cases, the data sets we work with are typically too large to be uploaded to GitHub. As a result, a common practice is storing your data in a folder, directly outside of your repository in a folder labeled "data".

The code chunk below for `read.csv` demonstrates how to exit your current location using `..` and enter the desired folder location using `/`. It is important that your file path does not contain any spaces and is directly reflective of the file path for the data you wish to read in.

#### U.S. Wind Data

```{r}
#--------Read in Data----------------
# reading in & storing data
wind_data <- read.csv("../data/wind_data/wind_data_usa.csv")  
```

##### Confirm the Data Loaded Properly

Using gg`plot()`, we can see that the geometries stored by this data set correlate to the locations of wind infrastructure plants throughout the United States. In order to visualize these locations with respect to state and county jurisdictions, we'll need to utilize another data set to create a base layer for our map. Here, we'll use the `ggspatial` function `annotation_map_tile`.

```{r}
#-----------Inspecting Data-----------
head(wind_data)                  # displays the first 6 rows of the data
                                 # along with all of the columns 
```

### **Converting lat/long into Raster Data (i.e. sticky geometries)**

Below we will use the package `sf` to convert the lat/long data into a raster geometry column. In this single line, we will also be assigning the CRS EPSG:4326 to the sf data frame. The CRS was selected because it provides a relatively proportionate display of the United States. We are open to suggestions regarding our CRS if a different project better fits our data.

```{r}
#-------------Converting df to sf Object--------------
wind_sf <- wind_data %>%             # calls desired dataset
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) 
                                     # creates geometry column with desired crs 
```

#### Check-point

Let's stop and see if our outputs are what we expect.

Were the lat/long columns correctly converted into a geometry column? `setdiff()` is a way to quickly determine the differences between two data sets.

```{r}
#-----------Determine the Column Differences----------
setdiff(colnames(wind_data), colnames(wind_sf))
setdiff(colnames(wind_sf), colnames(wind_data))
```

If we plot our sf object, is it what we expect? Our plot is interactive, so we may zoom in to different regions of interest and select specific wind farms to access information like plant name, state, region, general sensus information, and other variables includes in the [US Wind Data](https://dataverse.harvard.edu/file.xhtml?fileId=7339850&version=1.0) set.

```{r}
#--------------Map of US Wind Farms--------------------
# First visual of the U.S. wind data provided by the geometry points
tmap_mode('view')

wind_plants_map <- tm_shape(wind_sf) +
  tm_basemap(leaflet::providers$Esri.WorldImagery) +
  tm_bubbles(fill = 'skyblue') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_title('US Wind Farms')

wind_plants_map
```

## Selecting a Wind Farm

```{r}
#---------Function for Selecting Wind Farms--------
# create a function to select a plant name
select_wind_farm <- function(plant_name, data) {
  wind_sf %>% 
  filter(plant_name %in% "roscoe wind farm llc") %>% 
  st_sf() %>% 
  st_transform(4326) %>% 
  st_make_valid()
}

#---------Applying Function-------------------------
# filter for the plant name observation roscoe wind farm llc
wind_farm <- select_wind_farm("roscoe wind farm llc", data = wind_sf)

#---------Checking Extent of Wind Farm Geo-Point----
# where is our wind farm located?
extent(wind_farm)
```

### Let's take at look at our wind farm of interest!

Note: see about setting a closer zoom when first opening

```{r}
#--------------Map of Wind Farm---------------
# visualization of our wind farm (roscoe wind farm llc) overlayed ontop of our aoi (Nolan & Fisher Counties, TX).
tmap_mode('view')

wind_farm_map <- tm_shape(wind_farm) +
  tm_basemap(leaflet::providers$Esri.WorldImagery) +
  tm_bubbles(fill = 'skyblue') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_title('Roscoe Wind Farm LLC: Nolan & Fisher County, TX')

wind_farm_map
```

### AOI Data

We can also obtain building data from OpenStreetMap. We downloaded from [Geofabrick](https://www.geofabrik.de/data/download.html) and prepared a GeoPackage containing only houses in the Houston metropolitan area.

-   `gis_osm_buildings_a_free_1.gpkg`

Want:

-   a code that can go to [this main website](http://download.geofabrik.de/north-america/us.html), then select the state shape file of interest.

-   the scape the zip file for the state of interest

-   [download and select data for subsetting](https://cran.r-project.org/web/packages/osmextract/vignettes/osmextract.html)

This chunk is psuedo code

```{r}
#--------------Load Library----------------------
# This package is essentail to scape data from Open Street Maps
library(osmextract)

#--------------One line simplified Workflow------
# specifics on data attributes to subset
my_vectortranslate = c(
  "-t_srs", "EPSG:4326",                                 # SQL-like query where we select only the following fields
#  "-select", "osm_id, highway",             
 # "-where", "highway IN ('footway', 'cycleway')"         # SQL-like query where we filter only the features where highway is equal to footway or cycleway
)


# Create a bounding box for our area of interest using wind farm of interest
aoi_bbox <- st_bbox(extent(wind_farm)) %>% 
  st_as_sfc(CRS = 4326)


# Apply specifications and read everything in
USA_lines = oe_get('United States of America', 
                   vectortranslate_options = my_vectortranslate,
                   quiet = TRUE,
                   boundary = aoi_bbox)
```

Step-by-step data selection process (not psuedo code)

For simplicity's sake as we're developing this workflow, I will initially use TX data. After refining the process, I will then move to trying to load the whole country.

```{r}
#--------------Load Library----------------------
# This package is essentail to scape data from Open Street Maps
library(osmextract)

#------------Identifying OSM Data Set(s)---------
# identify data set containing USA. displays name and size of data set 
state_details <- oe_match('Texas')                       # Input the name of the state containing the wind farm of interest.

# download data to specific file directory (file type will be pbf in this case)
state_pbf <- oe_download(
  file_url = state_details$url, 
  file_size = state_details$file_size,
  provider = "state",
  download_directory =  "../data/osm_data/"             # path-to-a-directory
)

#--------------Inspect Data Downloaded------------
# pbf typically contain layers
st_layers(state_pbf, do_count = TRUE)



#----------Converting PBF to GPKG-----------------
# converting pbf format to gpkg format
state_gpkg <- oe_vectortranslate(state_pbf, layer = 'lines')



#----------Inspect gpkg Data----------------------
# check data to make sure file contains what we want.
st_layers(state_gpkg, do_count = TRUE)



#----------View Specific Features: Lines-----------
# describe the variables embedded in the layer called and display the bounds of those values.
oe_get_keys(state_gpkg, layer = "lines", values = TRUE)

#----------Tags of Interest Output in Console------
# some tags that we're interested in that were output in the console are:
# tag: lines               
# tiger:county (69% NAs), tiger:name_base (83% NAs) [street names], tiger:name_type (87% NAs) [type of street name i.e. Rd, St.], service (80% NAs) [type of road access], acess (84% NAs) [private, customers, permit], tiger:cfcc (71% NAs) [I unit numbers, need to check metadata]




#----------View Specific Features: Points----------
# describe the variables embedded in the layer called and display the bounds of those values.
oe_get_keys(state_gpkg, layer = "points", values = TRUE)

#----------Tags of Interest Output in Console------
# some tags that we're interested in that were output in the console are:
# tag: points
# addr:street (91% NAs) [combined name_base and name_type], addr:housenumber (92% NAs), addr:postcode (93% NAs), addr:city (97% NAs), amenity (95% NAs) [place of worship, restaurant, school] 





#-----------Subsetting Tags of Interest-------------
tags <- c("tiger:county", "tiger:name_base","tiger:name_type", "service", "acess", "tiger:cfcc", "addr:street", "addr:housenumber", "addr:postcode", "addr:city", "amenity")

# We can use these keys to specify aspects of the df to subset.
state_gpkg <- oe_vectortranslate(state_pbf, extra_tags = tags)



#-----------Reading in gpkg-----------------------
state <- oe_read(state_gpkg)
```

```{r}
#--------------Load Library----------------------
# This package is essentail to scape data from Open Street Maps
#library(osmextract)
selecting_state_data <- function(state_name) {

#------------Identifying OSM Data Set(s)---------
# identify data set containing USA. displays name and size of data set 
state_details <- oe_match(state_name)                       # Input the name of the state containing the wind farm of interest.

# download data to specific file directory (file type will be pbf in this case)
state_pbf <- oe_download(
  file_url = state_details$url, 
  file_size = state_details$file_size,
  provider = "state",
  download_directory =  "../data/osm_data/"             # path-to-a-directory
)



#----------Converting PBF to GPKG-----------------
# converting pbf format to gpkg format
state_gpkg <- oe_vectortranslate(state_pbf, layer = 'lines')

#----------Tags of Interest Output in Console------
# some tags that we're interested in that were output in the console are:

# tag: lines               
# tiger:county (69% NAs), tiger:name_base (83% NAs) [street names], tiger:name_type (87% NAs) [type of street name i.e. Rd, St.], service (80% NAs) [type of road access], acess (84% NAs) [private, customers, permit], tiger:cfcc (71% NAs) [I unit numbers, need to check metadata]


# tag: points
# addr:street (91% NAs) [combined name_base and name_type], addr:housenumber (92% NAs), addr:postcode (93% NAs), addr:city (97% NAs), amenity (95% NAs) [place of worship, restaurant, school] 

#-----------Subsetting Tags of Interest-------------
tags <- c("tiger:county", "tiger:name_base","tiger:name_type", "service", "acess", "tiger:cfcc", "addr:street", "addr:housenumber", "addr:postcode", "addr:city", "amenity")

# We can use these keys to specify aspects of the df to subset.
state_gpkg <- oe_vectortranslate(state_pbf, extra_tags = tags)



#-----------Reading in gpkg-----------------------
state <- oe_read(state_gpkg)
}

selecting_state_data('Texas')
```

SQL that may potentially help with reading

```{r}
#Using `st_read` and SQL query to select only residential buildings to then re-project the CRS to EPSG:4326.
# SQL Query to aid in data loading process
building_query <- "SELECT*
FROM gis_osm_buildings_a_free_1
WHERE (type IS NULL AND name IS NULL)
OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"

# Loading in the building data with the query
buildings <- st_read("data/gis_osm_buildings_a_free_1.gpkg",
                     query = building_query,
                     quiet = TRUE)
```

Below, we will read in some data corresponding to the state of interest. In this example, we are loading in a shapefile for Texas.

#### Nolan & Fisher County, TX

```{r include=TRUE, eval=FALSE, warning=FALSE, error=FALSE}
#------------Read in Data---------------
# read in data corresponding to the state of interest. In this example, we are loading in a shapefile for Texas.
state <- st_read("../data/wind_data/tl_2023_48_tabblock20/tl_2023_48_tabblock20.shp",
                      quiet = TRUE)                                                      # reads in raster data using the sf package st_read function. The quiet T/F input refers to information output after importing data.

#------------CRS for sf object-----------
# Setting the CRS for our state shapefile
state <- st_transform(state, "EPSG:4326")
```

## Wrangling & Sub-setting

When crafting a bounding box, we need to remember our goal:

-   Geo-locate neighborhoods within a 3km radius of a power plant for surveying.

Note: for every 0.01 change in coordinate decimal degrees equates to 1.11 km in distance.

The extent of our wind plant of interest is roughly (100.67, 32.47). Therefore, we expect our buffer extent to be within Â± 0.03 of the extent. To graph a wider perspective, we will make our bounding box 0.06 beyond the wind plant extent.

## Creating a Bounding Box for our Area of Interest (AOI)

I want to create a function that can automatically determine a bounding box region according to the extent of the wind farm.

```{r}
#----------Creating a Bounding Box------------------

# using wind farm of interest, filter for better data? or simply df downloaded
#milan_duomo = sf::st_sfc(sf::st_point(c(1514924, 5034552)), crs = 3003)
#oe_match(milan_duomo)





# bounding box of sweetwater tx, created using GeoJSON
bbox <- st_polygon(
  list(
    rbind(
      c(-100.83,
        32.53),
      c(-100.83,
        32.41),
      c(-100.51,
        32.41),
      c(-100.51,
        32.53),
      c(-100.83,
        32.53)
    )
  )
)

# making bounding box an sf object for cropping later
bbox <- bbox %>% 
  st_sfc() %>% 
  st_set_crs(4326) %>%  
  st_make_valid() 

#---------Check CRS Match---------------------------
# Crop the tx shapefile to only sweetwater bbox bounds. Some crs wrangling & checking needed before we can crop & plot.
st_crs(state) == st_crs(bbox)
```

#### Quick Visualization of bbox created for our aoi, overlayed with the wind farm's location.

```{r}
#---------------Cropping state df and combining df with wind_sf-----------
# Crop shapefile of tx to our bounding box extent and join with 
aoi <- st_crop(state, bbox) %>% 
  st_join(wind_sf, st_intersects) %>% 
  st_sf() %>% 
  st_transform(4326) %>% 
  st_make_valid() 

#---------------Visualizing Bounding Box around Wind Farm-----------------
# visualization of our wind farm overlayed ontop of our aoi.
tmap_mode('view')

aoi_map <- tm_shape(aoi) +
  tm_basemap(leaflet::providers$Esri.WorldImagery) +
  tm_polygons(alpha = 0.2) +
  tm_shape(wind_farm) +
  tm_bubbles(fill = 'skyblue',
          title = 'Roscoe Wind Farm LLC') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_title('AOI: Roscoe Wind Farm LLC: Nolan & Fisher County, TX')

aoi_map
```

## Buffers

Buffers create polygons representing a set distance from a feature.

The buffer zone dimensions were selected to correlate with the research presented in "Replication Data for: Prevalence and predictors of wind energy opposition in North America".

### Visualization of Geo-locations to Extract for Surveying

want:

-   a map of Nolan County, TX

-   the name of roscoe wind farm llc wind plant as a point with a 3km buffer donut around it

-   ability to randomly select addresses within the buffer

-   bonus: filter for specific groups of interest

-   detailed descriptions/annotations

Notes to improve map:

Need to fix the quantile grouping

```{r}
#---------Building a Buffer----------------------
# create a 3 km buffer around the wind farm
wind_farm_buffer <- st_buffer(wind_farm, dist = 3000) 


#---------Visualize Buffer around Wind Farm in Bounding Box-----------
# visualization of our 3km buffer around our wind farm of interest, overlayed ontop of our aoi.
tmap_mode('view')

aoi_buffer_map <- tm_shape(aoi) +
  tm_basemap(leaflet::providers$Esri.WorldImagery) +
  tm_polygons('POP20',
              style = 'quantile',
              palette = 'Oranges',
              alpha = 0.5) +
tm_shape(wind_farm_buffer) +
  tm_polygons(alpha = 0.2) +
tm_shape(aoi) +
  tm_polygons(alpha = 0.3) +
  tm_shape(wind_farm) +
  tm_bubbles(fill = 'skyblue',
          title = 'Roscoe Wind Farm LLC') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_title('Buffer AOI Within 3 km of Roscoe Wind Farm LLC: Nolan & Fisher County, TX') 

aoi_buffer_map
```

### Creating & Isolating a 3 km Buffer Region in our AOI

First, we will create a 3 km buffer around the wind farm.

Next, we will find the geo-points bordering and within our buffer aoi.

`st_intersection` combines the locations from the buffer and our aoi that intersect. This will combine all of the variables from both data sets.

`st_filter` applying `.predicate = st_within` filters the points in our aoi that fall within the wind_farm_buffer. The only information contained in this output are variables from the aoi data set.

```{r}
#---------Surveying points on buffer border-------------
# combine the locations from the buffer and our aoi that touch the border of the buffer, but these points do not overlap. 
# for some reason, I haven't been able to get st_filter join = st_intersects to work, so we're using st_intersection for now
areas_bordering_buffer <- st_intersection(aoi, wind_farm_buffer)# %>% 
  #st_union() %>% 
 # st_sf()
# include the variables from wind_farm_buffer that correspond to the observations in areas_within_buffer
areas_bordering_buffer <- st_join(areas_bordering_buffer, wind_farm_buffer, st_intersects) 


#---------Surveying points within buffer----------------
# filter the points in our aoi that fall within the wind_farm_buffer. The only information contained in this output are variables from the aoi data set.
areas_within_buffer <- st_filter(aoi, wind_farm_buffer, .predicate = st_within) #%>% 
 # st_union() %>% 
#  st_sf()

# include the variables from wind_farm_buffer that correspond to the observations in areas_within_buffer
areas_within_buffer <-st_join(areas_within_buffer, wind_farm_buffer, st_intersects)
```

#### Removing Overlapping Points

```{r warning=FALSE}
#---------------Group Similar Geo-points----------
#areas_bordering_buffer <- aggregate(areas_bordering_buffer, by = areas_bordering_buffer$geometry, FUN = mean) %>% 
  #group_by_all(sf_column_name = geometry) %>% 
 # distinct()   


#--------------Resample Using Nearest Neighbor------------
# want to find a function to resample this sf object and use nearest neighbor appraoch to combine similar points, probably need to rasterize first then convert back to sf object after.
#areas_bordering_buffer_2 <- st_resample(areas_bordering_buffer, areas_within_buffer, method = "near")
```

### Inspecting our Surveying AOI

We're going to retrieve the coordinates from the matrix containing the locations withiin the aoi buffer region. These are the most ideal locations for surveying.

The output will contain integer indicators that provide some insight into the kind of structure(s) are associated with each coordinate. More information can be found [here](https://r-spatial.github.io/sf/reference/st_coordinates.html) and [here](https://search.r-project.org/CRAN/refmans/sf/html/st_coordinates.html).

In this case, our outputs contain `L1` that has a single output of 1. This indicates these values are on the exterior ring of the buffer. When `L1` is greater than 1, then the associated coordinate is within the interior ring.

`L2` refers to the simple feature, for the polygon on multipolygon `L1` describes.

`L3`

#### Creating a sf object containing the coordinates of surveying points within our AOI.

Firstly, we will retrieve the coordinates from the matrix containing the locations within and intersecting the aoi buffer region. Next, we will combine both regions of interest and saving the surveying points as an sf object with the CRS 4326. Finally, we will remove any replicated geometric points by grouping them together and confirm the number of unique observations is equal to the number of observations in our sf object.

```{r message = FALSE}
#---------Isolating points for surveying----------
# Retrieve the coordinates from the matrix containing the locations within the aoi buffer region. 
surveying_points_within <- st_coordinates(areas_within_buffer) %>% 
  as.data.frame() 

# Retrieve the coordinates from the matrix containing the locations bordering the aoi buffer region.
surveying_points_bordering <- st_coordinates(areas_bordering_buffer) %>% 
  as.data.frame() 

# combining both regions of interest.
surveying_points <- full_join(surveying_points_within, surveying_points_bordering) 

# saving the surveying points as an sf object with the CRS 4326. 
surveying_points <- surveying_points %>% 
  st_as_sf(coords = c("X", "Y")) %>% 
  st_set_crs(4326)

# Remove any replicated geometric points by grouping them together.
surveying_points <- surveying_points %>% 
  group_by_all(sf_column_name = geometry) %>% 
  distinct()  

# confirm the number of unique observations is equal to the number of observations in our sf object.
nrow(unique(surveying_points)) == nrow(surveying_points)
```

### Geo-locating Neighborhoods to Survey Visualization

Using the interactive nature of this plot, we can see that a number of points are very close together, likely indicated multipolygons in that region (more than one structure).

```{r}
#---------Visual of Surveying Geo-points-------------
# visualization of our 3km buffer around our wind farm of interest, overlayed ontop of our aoi.
tmap_mode('view')

surveying_points_map <- tm_shape(surveying_points) +
  tm_basemap(leaflet::providers$Esri.WorldImagery) +
  tm_bubbles(col = '#C95B0C',
             alpha = 0.3) +
  tm_shape(aoi) +
  tm_polygons(alpha = 0.2) +
  tm_shape(wind_farm) +
  tm_bubbles(fill = 'skyblue',
          title = 'Roscoe Wind Farm LLC') +
  tm_scalebar(position = c('left', 'bottom')) +
  tm_title('Surveying Geo-points Within 3 km of Roscoe Wind Farm LLC: Nolan & Fisher County, TX') 
surveying_points_map
```

want:

-   extract tract id / block id / addresses from buffer region

### Function to Automate our Process

want:

-   one function that contains all the necessary steps to configure the same outputs above, but for new wind power plants.

We would need a dataset for the entire country. At this point in time, we are limited to the state of Texas.

```{r}

```
